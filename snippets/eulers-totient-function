// Euler's totient function phi(n) -> number of integers in range [1, n]
// coprime to n
// phi(prime number) = prime number - 1
// phi (N) = N(1-1/p1)(1-1/p2).... for unique primes p1, p2.. in prime
// factorization of N
//

// euler totient function for a number n in O(sqrt(n))
int getEulerTotient(int num) {
	int result=num;
	for(int i=2;i*i<=num;i++) {
		if(num%i==0) {
			result-=result/i;
			while(num%i==0) {
				num/=i;
			}
		}
	}
	if(num>1) {
		result-=result/num;
	}
	return result;
}

// euler totient phi(n) for all numbers from 1 to n, similar to sieve

vector<int> getAllEulerTotienst_1_to_n(int n) {
	vector<int> phi(n + 1);
	for (int i = 1; i <= n; i++) phi[i] = i;
	for (int i = 2; i <= n; i++) {
		if (phi[i] == i) {
			for (int j = i; j <= n; j += i) {
				phi[j] -= phi[j] / i;
			}
		}
	}	
	return phi;
}